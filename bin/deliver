#!/usr/bin/env ruby

$:.push File.expand_path("../../lib", __FILE__)

require 'deliver'
require 'commander/import'

HighLine.track_eof = false # Fix for built-in Ruby


# Commander
program :version, Deliver::VERSION
program :description, 'CLI for \'Deliver\' - Automate uploading of app metadata, screenshots and app updates to Apple'
program :help, 'Author', 'Felix Krause <krausefx@gmail.com>'
program :help, 'Website', 'http://felixkrause.at'
program :help, 'GitHub', 'https://github.com/krausefx/deliver'
program :help_formatter, :compact

global_option('--verbose') { $verbose = true }

default_command :run


command :run do |c|
  c.syntax = 'deliver'
  c.description = 'Run a deploy process using the Deliverfile in the current folder'
  c.option '--force', 'Runs a deployment without verifying any information. This can be used for build servers.'
  c.action do |args, options|
    Deliver::DependencyChecker.check_dependencies

    if File.exists?(deliver_path)
      # Everything looks alright, use the given Deliverfile
      Deliver::Deliverer.new(deliver_path, force: options.force)
    else
      Deliver::Helper.log.warn("No Deliverfile found at path '#{deliver_path}'.")
      if agree("Do you want to create a new Deliverfile at the current directory? (y/n)", true)
        Deliver::DeliverfileCreator.create(enclosing_directory)
      end
    end
  end
end

command :init do |c|
  c.syntax = 'deliver init'
  c.description = "Creates a new Deliverfile in the current directory"

  c.action do |args, options|
    Deliver::DependencyChecker.check_dependencies

    Deliver::DeliverfileCreator.create(enclosing_directory)
  end
end


def deliver_path
  [enclosing_directory, Deliver::Deliverfile::Deliverfile::FILE_NAME].join('/')
end

# The directoy in which the Deliverfile and metadata should be created
def enclosing_directory
  "."
end