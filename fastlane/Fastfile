
desc "Run bundle install and tests"
lane :test do
  sh "cd .. && bundle install"
  sh "cd .. && rspec"
end

desc "Does everything that's needed for a release, this includes running tests and verifying the GitHub release"
lane :release do |options|
  # Fetching all information required for the release
  # 
  tool_name = options[:tool] || File.basename(File.expand_path('..', Dir.pwd))
  binary_path = "../../#{tool_name}/bin/#{tool_name}"

  github_organisation = "fastlane"
  github_organisation = "KrauseFx" if krausefx_repos.include?tool_name
  github_url = [github_organisation, tool_name].join("/")

  # Verifying RubyGems version
  # 
  require "../lib/#{tool_name}/version"
  module_ref = Object.const_get(tool_name.split('_').collect(&:capitalize).join)
  version = module_ref::VERSION
  old_version = current_version(tool: tool_name)
  puts "Deploying #{tool_name} #{version}"
  if Gem::Version.new(version) <= Gem::Version.new(old_version)
    raise "Version number #{version} was already deployed"
  end

  # Preparing GitHub Release
  # 
  github_release = get_github_release(url: github_url, version: version)
  if (github_release || {}).fetch('body', '').length == 0
    `open https://github.com/#{github_url}/compare/#{old_version}...master`

    title = prompt(text: 'Title: ')
    description = prompt(text: "Please enter a changelog: ",
                         multi_line_end_keyword: "END")

    github_release = set_github_release(
      repository_name: github_url,
      name: [version, title].join(" "),
      tag_name: version,
      description: description,
      is_draft: false
    )
  end
  
  # Verifying the --help command
  # 
  unless no_binary.include?tool_name
    content = sh "#{binary_path} --help"
    ["--version", "Felix Krause", "https://fastlane.tools", tool_name].each do |current|
      raise "--help missing information: '#{current}'" unless content.include?current
    end
  end

  # Running ruby things
  # 
  sh "cd .. && bundle install"
  sh "cd .. && rake install"

  # Run the tests
  # 
  sh "cd .. && rspec"

  # Git verification
  # 
  ensure_git_status_clean
  ensure_git_branch(branch: 'master')
  git_pull
  push_to_git_remote

  # Actual release
  # 
  sh "gem push ../pkg/#{tool_name}-#{version}.gem"

  # After publishing
  # 
  slack(
    channel: "releases",
    default_payloads: [],
    message: "Successfully released [#{tool_name} #{version}](github_release['html_url']) :rocket:",
    payload: {
      "New" => github_release['body']
    }
  )

  puts "You can now tweet:".green
  puts "[#{tool_name}] #{github_release['name']} #{github_release['html_url']}"
end


desc "Get the version number of the last release"
private_lane :current_version do |options|
  require 'open-uri'
  puts "Checking the latest version on RubyGems"
  JSON.parse(open("https://rubygems.org/api/v1/gems/#{options[:tool]}.json").read)["version"]
end

desc "All repos that are still on github.com/KrauseFx"
private_lane :krausefx_repos do
  ['fastlane', 'deliver', 'snapshot', 'sigh']
end

desc "All repos that don't have a binary to test" 
private_lane :no_binary do
  ['fastlane_core', 'spaceship', 'credentials_manager']
end
